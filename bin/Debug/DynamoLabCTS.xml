<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DynamoLabCTS</name>
    </assembly>
    <members>
        <member name="T:DynamoLabCTS.Revit.Views.ScheduleView">
            <summary>
            Utility class that contains methods of view schedule creation and schedule sheet instance creation.
            </summary>
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.CreateSchedules_ZTN(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Create a view schedule of ViewSchedule category and add schedule field, filter and sorting/grouping field to it.
            </summary>
            <param name="categoryName">Name of the Element Category.</param>
            <param name="scheduleName">Name of the New created schedule.</param>
            <param name="fieldNames">Name of the New created schedule.</param>
            <returns name="Schedule">new created schedule(s) with selected Field</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.Category2BuiltInCategory_ZTN(Revit.Elements.Category)">
            <summary>
            map from Dynamo Category to BuildinCategory.
            </summary>
            <param name="category">Dynamo Category.</param>
            <returns name="BuiltInCategory">BuiltIn Category</returns> 
            <returns name="BuiltInCategory Name">BuiltIn Category name</returns>
            <returns name="Category Name">BuiltIn Category name</returns>
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.CreateSchedules_IncludeElementsInLinks_ZTN(Revit.Elements.Category,System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Create a view schedule of ViewSchedule category and add schedule field, filter and sorting/grouping field to it.
            </summary>
            <param name="category">Schedule Category.</param>
            <param name="scheduleName">Name of the New created schedule.</param>
            <param name="fieldNames">Name of the New created schedule.</param>
            <param name="includeElementsInLinks">Check the option Include Elements In Links.</param>
            <returns name="Schedule">new created schedule(s) with selected Field</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.SetScheduleHeader_ZTN(Revit.Elements.Views.ScheduleView,System.String)">
            <summary>
            Change Schedule header to a new name.
            </summary>
            <param name="dynamoSchedule">Selected Schedules.</param>
            <param name="newHeaderName">Name of the New created schedule.</param>
            <returns name="Schedule">schedule(s) with new header</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.AddFilter_ZTN(Revit.Elements.Views.ScheduleView,System.String,Autodesk.Revit.DB.ScheduleFilterType,System.String)">
            <summary>
            Add filter to selected schedule.
            </summary>
            <param name="dynamoSchedule">Selected Schedules.</param>
            <param name="fieldName">Name of the scheduled field.</param>
            <param name="filterType">FilterType of the scheduled field.</param>
            <param name="filterInformation">filter information of the scheduled field.</param>
            <returns name="Schedule">schedule(s) with new header</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.SortSchedule_ZTN(Revit.Elements.Views.ScheduleView,System.String,System.Boolean)">
            <summary>
            sort selected field at selected schedule.
            </summary>
            <param name="dynamoSchedule">Selected Schedules.</param>
            <param name="fieldName">Name of the scheduled field.</param>
            <param name="ascendingOrDescending">choose sort option: true means Ascending, false means Descending.</param>
            <returns name="Schedule">schedule(s) with new header</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.OverrideColumnHearder_ZTN(Revit.Elements.Views.ScheduleView,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            change field heading at selected schedule.
            </summary>
            <param name="dynamoSchedule">Selected Schedules.</param>
            <param name="fieldNameList">Name of the scheduled field.</param>
            <param name="newFieldNameList"> new Name of the scheduled field.</param>
            <returns name="Schedule">schedule(s) with new header</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.HideColumn_ZTN(Revit.Elements.Views.ScheduleView,System.String)">
            <summary>
            Using the ScheduleField.IsHidden property to hide selected field.
            </summary>
            <param name="dynamoSchedule">Selected Schedules.</param>
            <param name="fieldName">Name of the scheduled field.</param>
            <returns name="Schedule">schedule(s) with new header</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.ScheduleFilterType_ZTN">
            <summary>
            Display all available ScheduleFilterType, you can choose according to Index. 
            Possible Error message: The filter value is not valid for the field and filter type.
            </summary>
            <returns name="ScheduleFilterType">schedule(s) filter type list</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.ScheduleFieldMap_ZTN(Revit.Elements.Views.ScheduleView,System.String)">
            <summary>
            Using the ScheduleField.IsHidden property to hide selected field.
            </summary>
            <param name="dynamoSchedule">Selected Schedules.</param>
            <param name="fieldName">Name of the scheduled field.</param>
            <returns name="SscheduleFieldParameterID">The ID of the parameter displayed by the field.</returns> 
            <returns name="ScheduleFieldID">The ID of the field in the containing ScheduleDefinition</returns>
            <returns name="ScheduleFieldIndex">The index of the field in the containing ScheduleDefinition.</returns>
            <returns name="ScheduleColumnHeading">The column heading text.</returns>
            <returns name="ScheduleFieldType">The type of data displayed by the field.</returns>
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.SchedulableField_ZTN(Revit.Elements.Views.ScheduleView)">
            <summary>
            Return all schedulable fields of the selected Schedule. 
            Remove  shared or project parameter from field
            </summary>
            <returns name="SchedulableField">schedulable field of the selected schedule</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.SchedulableFieldName_ZTN(Revit.Elements.Views.ScheduleView)">
            <summary>
            Return all schedulable fields of the selected Schedule. 
            Remove  shared or project parameter from field
            </summary>
            <param name="dynamoSchedule">Selected Schedules.</param>
            <returns name="SchedulableFieldName">schedulable field name of the selected schedule</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.ScheduledField_ZTN(Revit.Elements.Views.ScheduleView)">
            <summary>
            Return all selected schedulable fields of the selected Schedule. 
            </summary>
            <param name="dynamoSchedule">Selected Schedules.</param>
            <returns name="ScheduledField">scheduled Fields of selected Schedule</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.ScheduledFieldName_ZTN(Revit.Elements.Views.ScheduleView)">
            <summary>
            Return all selected schedulable fields of the selected Schedule. 
            </summary>
            <param name="dynamoSchedule">Selected Schedules.</param>
            <returns name="ScheduledFieldName">scheduled Field name of selected Schedule</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.ScheduleFields_ZTN(Revit.Elements.Views.ScheduleView)">
            <summary>
            Return all schedulable fields and scheduled fields of the selected Schedule. 
            </summary>
            <param name="dynamoSchedule">Selected Schedules.</param>
            <returns name="SchedulableFieldName">scheduled Field name of selected Schedule</returns> 
            <returns name="ScheduledFieldName">scheduled Field name of selected Schedule</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.AddSharedParameters_1Category_ZTN(System.String,System.String,System.String,Revit.Elements.Category,System.String,System.Boolean)">
            <summary>
            Add project shared parameters and assign to single category,this methods works for Revit 2021 and later versions.
            From SDK worked example DoorSwing: DoorSharedParameter.CS
            </summary>
            <param name="paraName">New defined shared Parameter Name.</param>
            <param name="groupName">The shared parameter group which is defined at Edit Shared Parameters dialog.</param>
            <param name="paraType">Type of Parameter choosen from Parameter Properties dialog, for example text or int or YesNo.</param>
            <param name="dynamoCategory">Category of the shared parameter applied to, for example Structural Columns, Doors.</param>
            <param name="builtInParaGroupName">Information from Group Parameter Under,built-in parameter groups supported by Autodesk Revit, for example PG_TEXT, PG_IDENTITY_DATA.</param>
            <param name="instanceOrType">ture means family instance parameter, false means family type parameter.</param>
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.AddSharedParametersToCategoryList_ZTN(System.String,System.String,System.String,System.Collections.Generic.List{Revit.Elements.Category},System.String,System.Boolean)">
            <summary>
            Add shared parameters needed in this sample, ,this methods works for Revit 2021 and later versions.
            From SDK worked example DoorSwing: DoorSharedParameter.CS
            </summary>
            <param name="paraName">New defined shared Parameter Name.</param>
            <param name="groupName">The shared parameter group which is defined at Edit Shared Parameters dialog.</param>
            <param name="paraType">Type of Parameter choosen from Parameter Properties dialog, for example text or int or YesNo.</param>
            <param name="dynamoCategoryList">Category of the shared parameter applied to, for example Structural Columns, Doors.</param>
            <param name="builtInParaGroupName">Information from Group Parameter Under,built-in parameter groups supported by Autodesk Revit, for example PG_TEXT, PG_IDENTITY_DATA.</param>
            <param name="instanceOrType">ture means family instance parameter, false means family type parameter.</param>
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.AccessOrCreateSharedParameterFile(Autodesk.Revit.ApplicationServices.Application)">
            <summary>
            Access an existing or create a new shared parameters file.
            </summary>
            <param name="app">Revit Application.</param>
            <returns>the shared parameters file.</returns>
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.AlreadyAddedSharedParameter(Autodesk.Revit.DB.Document,System.String,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
            Has the specific document shared parameter already been added ago?
            </summary>
            <param name="doc">Revit project in which the shared parameter will be added.</param>
            <param name="paraName">the name of the shared parameter.</param>
            <param name="boundCategory">Which category the parameter will bind to</param>
            <returns>Returns true if already added ago else returns false.</returns>
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.BuiltInParameterGroup_ZTN">
            <summary>
            An enumerated type listing all of the built-in parameter groups supported by Autodesk Revit. 
            such as ["PG_GRAPHICS", "PG_IDENTITY_DATA", "PG_CONSTRAINTS"] 
            </summary>
            <returns name="BuiltInParameterGroup">BuiltInParameterGroup list</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.BuiltInParameterGroupAccordingToName_ZTN(System.String)">
            <summary>
            An enumerated type listing all of the built-in parameter groups supported by Autodesk Revit. 
            such as ["PG_GRAPHICS", "PG_IDENTITY_DATA", "PG_CONSTRAINTS"] 
            </summary>
            <returns name="BuiltInParameterGroup">BuiltInParameterGroup list</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.ForgeTypeIdDict_ZTN">
            <summary>
            Revit 2021 deprecated the UnitType property and replaced it with the GetSpecTypeId method.
            Revit 2022 deprecated the ParameterType property and the GetSpecTypeId method, replacing them both with the GetDataType method.
            </summary>
            <returns name="SpecTypeIdProperty Name">SpecTypeId Properties Name</returns> 
            <returns name="forgeTypeId">Special SpecTypeId Properties, like SpecTypeId.String.Text, or SpecTypeId.Boolean.YesNo</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Views.ScheduleView.SpecTypeId_ZTN">
            <summary>
            Revit 2021 deprecated the UnitType property and replaced it with the GetSpecTypeId method.
            Revit 2022 deprecated the ParameterType property and the GetSpecTypeId method, replacing them both with the GetDataType method.
            </summary>
            <returns name="SpecTypeIdProperty Name">SpecTypeId Properties Name</returns> 
            <returns name="forgeTypeId">Special SpecTypeId Properties, like SpecTypeId.String.Text, or SpecTypeId.Boolean.YesNo</returns> 
        </member>
        <member name="T:DynamoLabCTS.Revit.Elements.StructuralRebar">
            <summary>
            Utility class that contains methods of reinforment rebar creation.
            </summary>
        </member>
        <member name="F:DynamoLabCTS.Revit.Elements.StructuralRebar.m_hostObject">
            <summary>
            the family instance to places rebar on
            </summary>
        </member>
        <member name="F:DynamoLabCTS.Revit.Elements.StructuralRebar.m_rebarBarTypes">
            <summary>
            a set to store all the rebar types
            </summary>
        </member>
        <member name="F:DynamoLabCTS.Revit.Elements.StructuralRebar.m_rebarHookTypes">
            <summary>
            a list to store all the hook types
            </summary>
        </member>
        <member name="F:DynamoLabCTS.Revit.Elements.StructuralRebar.m_rebarBarTypeNames">
            <summary>
            a set to store all the rebar types name
            </summary>
        </member>
        <member name="F:DynamoLabCTS.Revit.Elements.StructuralRebar.m_rebarHookTypeNames">
            <summary>
            a list to store all the hook types name
            </summary>
        </member>
        <member name="P:DynamoLabCTS.Revit.Elements.StructuralRebar.RebarBarTypes">
            <summary>
            Show all the rebar types in revit
            </summary>
        </member>
        <member name="P:DynamoLabCTS.Revit.Elements.StructuralRebar.RebarHookTypes">
            <summary>
            Show all the rebar hook types in revit
            </summary>
        </member>
        <member name="P:DynamoLabCTS.Revit.Elements.StructuralRebar.RebarBarTypeNames">
            <summary>
            Show all the rebar types' name in revit
            </summary>
        </member>
        <member name="P:DynamoLabCTS.Revit.Elements.StructuralRebar.RebarHookTypeNames">
            <summary>
            Show all the rebar hook types' name in revit
            </summary>
        </member>
        <member name="F:DynamoLabCTS.Revit.Elements.StructuralRebar.m_rebarStyles">
            <summary>
            a list to store all the Rebar Style
            </summary>
        </member>
        <member name="P:DynamoLabCTS.Revit.Elements.StructuralRebar.RebarStyles">
            <summary>
            Show all the rebar style in revit
            </summary>
        </member>
        <member name="F:DynamoLabCTS.Revit.Elements.StructuralRebar.m_rebarHookOrientations">
            <summary>
            a list to store all the Rebar Hook Orientation
            </summary>
        </member>
        <member name="P:DynamoLabCTS.Revit.Elements.StructuralRebar.RebarHookOrientations">
            <summary>
            Show all the rebar Hook Orientation in revit
            </summary>
        </member>
        <member name="F:DynamoLabCTS.Revit.Elements.StructuralRebar.m_rebarShapes">
            <summary>
            a list to store all the Rebar Shape
            </summary>
        </member>
        <member name="P:DynamoLabCTS.Revit.Elements.StructuralRebar.RebarShapes">
            <summary>
            Show all the rebar shape in revit
            </summary>
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.GetRebarInfor">
            <summary>
            The constructor of RebarBarType,RebarHookType
            </summary>
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.CreateRebar_ZTN(Revit.Elements.Element,Autodesk.Revit.DB.Structure.RebarBarType,Autodesk.Revit.DB.Structure.RebarHookType)">
            <summary>
            A wrap fuction which used to create the reinforcement.
            </summary>
            <param name="columnDynamo">The host element of the rebar</param>
            <param name="barType">The element of RebarBarType</param>
            <param name="hookType">The element of RebarHookType</param>
            <returns name="Rebar">new created Rebar</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.CreateRebarFromCurve_ZTN(Autodesk.Revit.DB.Structure.RebarStyle,Autodesk.Revit.DB.Structure.RebarBarType,Autodesk.Revit.DB.Structure.RebarHookType,Autodesk.Revit.DB.Structure.RebarHookType,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Vector,System.Collections.Generic.IList{Autodesk.DesignScript.Geometry.Curve},Autodesk.Revit.DB.Structure.RebarHookOrientation,Autodesk.Revit.DB.Structure.RebarHookOrientation,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of a shape driven Rebar element within the project.
            </summary>
            <param name="style">Type: Autodesk.Revit.DB.Structure RebarBarType, 
            The usage of the bar, "Autodesk.Revit.DB.Structure.RebarStyle.Standard" or "stirrup/tie"</param>
            <param name="barType">A RebarBarType element that defines bar diameter, bend radius and material of the rebar.</param>
            <param name="startHookType">A RebarHookType element that defines the hook for the start of the bar. 
            If this parameter is a null reference ( Nothing in Visual Basic) , it means to create a rebar with no hook.</param>
            <param name="endHookType">A RebarHookType element that defines the hook for the end of the bar. 
            If this parameter is a null reference ( Nothing in Visual Basic) , it means to create a rebar with no hook.</param>
            <param name="dynamoHost">The element to which the rebar belongs. The element must support rebar hosting.</param>
            <param name="normDynamo">The normal to the plane that the rebar curves lie on.</param>
            <param name="curvesDynamo">An array of curves that define the shape of the rebar curves. They must belong to 
            the plane defined by the normal and origin. Bends and hooks should not be included in the array of curves..</param>
            <param name="startHookOrient">Defines the orientation of the hook plane at the start of the rebar with respect to 
            the orientation of the first curve and the plane normal,RebarHookOrientation.Right.</param>
            <param name="endHookOrient">Defines the orientation of the hook plane at the end of the rebar with respect to the 
            orientation of the last curve and the plane normal,RebarHookOrientation.Left.</param>
            <param name="useExistingShapeIfPossible">Attempts to assign a RebarShape from those existing in the document. 
            If no shape matches, NewRebar returns or creates a new shape, according to the parameter createNewShape.</param>
            <param name="createNewShape">Creates a shape in the document to match the curves, hooks, and style specified, 
            and assigns it to the new rebar instance.</param>
            <returns name="Rebar">new created Rebar</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.CreateRebarFromRebarShape_ZTN(Autodesk.Revit.DB.Structure.RebarShape,Autodesk.Revit.DB.Structure.RebarBarType,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Creates a new shape driven Rebar, as an instance of a RebarShape.
            </summary>
            <param name="rebarShape">A RebarShape element that defines the shape of the rebar.</param>
            <param name="barType">A RebarBarType element that defines bar diameter, bend radius and material of the rebar.</param>
            <param name="dynamoHost">The element to which the rebar belongs. The element must support rebar hosting.</param>
            <param name="originDynamo">The lower-left corner of the shape's bounding box will be placed at this point in the project.</param>
            <param name="xVecDynamo">The x-axis in the shape definition will be mapped to this direction in the project.</param>
            <param name="yVecDynamo">The y-axis in the shape definition will be mapped to this direction in the project.</param>
            <returns name="Rebar">new created Rebar</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.GetRebarShapes(Autodesk.Revit.DB.Document)">
            <summary>
            get all instances of Rebar Shape, which defines the shape of a rebar
            </summary>
            <param name="doc">Get application and document objects</param>
            <returns>true if some rebar shapes can be gotton, otherwise false</returns>
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.GetRebarShapeName(Autodesk.Revit.DB.Structure.RebarShape)">
            <summary>
            get all instances of Rebar Shape's name based on the rebar shape
            </summary>
            <param name="rebarShape">instance of a Rebar Shape, which defines the shape of a rebar</param>
            <returns>rebar shape's name</returns>
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.GetRebarHost_ZTN(Revit.Elements.Element)">
            <summary>
            A wrap fuction which used to retrieve host element of the selected rebar.
            </summary>
            <param name="dynamoRebar">select rebar element in Revit</param>
            <returns name="Rebar Host Element">The host element of the rebar</returns> 
            <returns></returns>
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.GetRebarTypeProperties_ZTN(Revit.Elements.Element)">
            <summary>
            Get type properties of the selected rebar element
            </summary>
            <param name="dynamoRebar">Select Rebar instance in Revit</param>
            <returns>Offset</returns>
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.GetRebarCentralLineCurves_ZTN(Revit.Elements.Element)">
            <summary>
            Get A chain of curves representing the centerline of the selected rebar element
            </summary>
            <param name="dynamoRebar">Select Rebar element in Revit</param>
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.GetRebarShape_ZTN(Revit.Elements.Element)">
            <summary>
            Get rebar shape name in Revit API
            </summary>
            <returns name="rebarShapName">corresponding rebar shape name</returns> 
            <returns name="rebarShape">corresponding rebar shape</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.FreeFormOrShapeDriven_ZTN(Revit.Elements.Element)">
            <summary>
            Returns true if the rebar is free form and false if shape driven.
            </summary>
            <param name="dynamoRebar">Select Rebar element in Revit</param>
            <returns name="Free Form">Returns true if the rebar is free form and false if shape driven.</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.GetRebarProperties_ZTN(Revit.Elements.Element)">
            <summary>
            Get selected rebar properties
            </summary>
            <returns name="startRebarHookOrientation"> Returns the orientation of the hook plane at the start of the rebar 
            with respect to the orientation of the first or the last curve and the plane normal.</returns> 
            <returns name="endRebarHookOrientation"> Returns the orientation of the hook plane at the end of the rebar 
            with respect to the orientation of the first or the last curve and the plane normal.</returns> 
            <returns name="startRebarHookType">	Get the RebarHookType at the start of the rebar.</returns> 
            <returns name="startRebarHookTypeName"> Get the RebarHookType'name at the start of the rebar</returns> 
            <returns name="endRebarHookType"> Get the RebarHookType at the end of the rebar</returns> 
            <returns name="endRebarHookTypeName"> Get the RebarHookType'name at the end of the rebar</returns> 
            <returns name="rebarShape"> Returns the RebarShape element that defines the shape of the rebar.</returns> 
            <returns name="rebarShapeName"> Returns the RebarShape element's name</returns> 
            <returns name="rebarBarType"> Returns the rebar element's type.</returns> 
            <returns name="rebarBarTypeName"> Returns the rebar element's type name</returns> 
            <returns name="rebarStyle"> Whether the shape represents a standard bar or a stirrup.</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.SetLayoutAsMaximumSpacing(Revit.Elements.Element,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the Layout Rule property of rebar set to SetLayoutAsMaximumSpacing
            </summary>
            <param name="dynamoRebar"> selected Rebar element to be replicated </param>
            <param name="spacing"> The maximum spacing between rebar in rebar set </param>
            <param name="arrayLength"> The distribution length of rebar set </param>
            <param name="barsOnNormalSide"> Identifies if the bars of the rebar set are on the same side of the rebar plane indicated by the normal </param>
            <param name="includeFirstBar"> Identifies if the first bar in rebar set is shown </param>
            <param name="includeLastBar"> Identifies if the last bar in rebar set is shown </param>
            <returns name="Rebar Set"> the new created rebar layout.</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.SetLayoutAsMinimumClearSpacing(Revit.Elements.Element,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the Layout Rule property of rebar set to MinimumClearSpacing
            </summary>
            <param name="dynamoRebar"> selected Rebar element to be replicated </param>
            <param name="spacing"> The maximum spacing between rebar in rebar set </param>
            <param name="arrayLength"> The distribution length of rebar set </param>
            <param name="barsOnNormalSide"> Identifies if the bars of the rebar set are on the same side of the rebar plane indicated by the normal </param>
            <param name="includeFirstBar"> Identifies if the first bar in rebar set is shown </param>
            <param name="includeLastBar"> Identifies if the last bar in rebar set is shown </param>
            <returns name="Rebar Set"> the new created rebar layout.</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.SetLayoutAsFixedNumber(Revit.Elements.Element,System.Int32,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the Layout Rule property of rebar set to FixedNumber.
            </summary>
            <param name="dynamoRebar"> selected Rebar element to be replicated </param>
            <param name="numberOfBarPositions"> The number of bar positions in rebar set </param>
            <param name="arrayLength"> The distribution length of rebar set </param>
            <param name="barsOnNormalSide"> Identifies if the bars of the rebar set are on the same side of the rebar plane indicated by the normal </param>
            <param name="includeFirstBar"> Identifies if the first bar in rebar set is shown </param>
            <param name="includeLastBar"> Identifies if the last bar in rebar set is shown </param>
            <returns name="Rebar Set"> the new created rebar layout.</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.SetLayoutAsNumberWithSpacing(Revit.Elements.Element,System.Int32,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the Layout Rule property of rebar set to NumberWithSpacing
            </summary>
            <param name="dynamoRebar"> selected Rebar element to be replicated </param>
            <param name="numberOfBarPositions"> The number of bar positions in rebar set </param>
            <param name="spacing"> The maximum spacing between rebar in rebar set </param>
            <param name="barsOnNormalSide"> Identifies if the bars of the rebar set are on the same side of the rebar plane indicated by the normal </param>
            <param name="includeFirstBar"> Identifies if the first bar in rebar set is shown </param>
            <param name="includeLastBar"> Identifies if the last bar in rebar set is shown </param>
            <returns name="Rebar Set"> the new created rebar layout.</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.SetLayoutAsSingle(Revit.Elements.Element)">
            <summary>
            Sets the Layout Rule property of rebar set to Single
            </summary>
            <param name="dynamoRebar"> selected Rebar element to be replicated </param>
            <returns name="Rebar Set"> the new created rebar layout.</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.SetRebarSpaceAndNumber(Autodesk.Revit.DB.Structure.Rebar,System.Int32,System.Double)">
            <summary>
            The helper function to changed rebar number and spacing properties
            </summary>
            <param name="bar">The rebar instance which need to modify</param>
            <param name="number">The rebar number want to set</param>
            <param name="spacing">The spacing want to set</param>
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.CollectAllViews">
            <summary>
            Select all views in the Revit model.
            </summary>
            <returns name="Views"> retrun views in the model.</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.GetViewAccordingToName(System.String)">
            <summary>
            retrun view according to the provided viewName.
            </summary>
            <param name="viewName"> view name in string </param>
            <returns name="Views"> retrun view according to the provided viewName.</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.ShowRebarInView(Revit.Elements.Element,Revit.Elements.Views.View)">
            <summary>
            Edit rebar visibility setting at the view.
            </summary>
            <param name="dynamoRebar"> the selected rebar to Edit visibility </param>
            <param name="dynamoView"> make the rebar visible at this view </param>
            <returns name="Rebar"> retrun view according to the provided viewName.</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.ShowRebar3d(Autodesk.Revit.DB.Structure.Rebar)">
            <summary>
            Show the given rebar as solid in 3d view.
            </summary>
            <param name="rebar">Rebar to show in 3d view as solid</param>
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.GetHookTypes(Autodesk.Revit.DB.Document)">
            <summary>
            get all the hook types in current project, and store in m_rebarHookTypes data
            </summary>
            <param name="doc">Get application and document objects</param>
            <returns>true if some hook types can be gotton, otherwise false</returns>
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.GetRebarTypes(Autodesk.Revit.DB.Document)">
            <summary>
            get all the rebar types in current project, and store in m_rebarBarTypes data
            </summary>
            <param name="doc">Get application and document objects</param>
            <returns>true if some rebar types can be gotton, otherwise false</returns>
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.GetRebarStyle_ZTN">
            <summary>
            get all the rebar style in current project, and store in m_rebarStyles data
            </summary>
            <returns>true if some rebar styles can be gotton, otherwise false</returns>
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.GetRebarHookOrientation_ZTN">
            <summary>
            get all the rebar Hook Orientation in current project, and store in m_rebarHookOrientations data
            </summary>
            <returns>true if some rebar styles can be gotton, otherwise false</returns>
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.StructuralColumnLength(Revit.Elements.Element)">
            <summary>
            Structural framing _ column length
            </summary>
            <param name="dynamoColumn"> select structural framing _ column in Revit </param>
            <returns name="Column Length"> the length of the column.</returns> 
        </member>
        <member name="M:DynamoLabCTS.Revit.Elements.StructuralRebar.OverrideHookLengths(Revit.Elements.Element,System.Int32)">
            <summary>
            Override rebar Hook Lengths (family instance parameter), 0 means uncheck, 1 means check
            </summary>
            <param name="dynamoRebar"> select structural rebar in Revit </param>
            <param name="newValue"> Override rebar Hook Lengths option, 0 means uncheck, 1 means check </param>
            <returns name="Rebar"> updated Rebar with new parameter value.</returns> 
        </member>
    </members>
</doc>
